#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
from pandas.api.types import CategoricalDtype
from sklearn.preprocessing import LabelEncoder
import os
import pickle
import numpy as np


class cd:
    """Context manager for changing the current working directory"""

    def __init__(self, newPath):
        self.newPath = os.path.expanduser(newPath)

    def __enter__(self):
        self.savedPath = os.getcwd()
        os.chdir(self.newPath)

    def __exit__(self, etype, value, traceback):
        os.chdir(self.savedPath)


def add_drop(df, add_val=None, drop_val=None, output='Peptide', axis=0):
    if drop_val:
        if isinstance(drop_val, (int, str)):
            if drop_val in df.columns:
                df.drop(drop_val, axis=1, inplace=True)
            else:
                df.drop(drop_val, level=output, axis=axis, inplace=True)
        elif isinstance(drop_val, list):
            for val in drop_val:
                if val in df.columns:
                    df.drop(val, axis=1, inplace=True)
                else:
                    df.drop(val, level=output, axis=axis, inplace=True)
    if add_val:
        if isinstance(add_val, str):
            df[add_val] = df.index.get_level_values(level=add_val).astype('category')
            df[add_val] = LabelEncoder().fit_transform(df[add_val])

        elif isinstance(add_val, list):
            for key in add_val:
                df[key] = df.index.get_level_values(level=key).astype('category')
                df[key] = LabelEncoder().fit_transform(df[key])
    return df

def get_data(args, **kwargs):
    ''' Read in data from single cell DataFrame generated by Plateypus.'''
    df = pd.read_hdf(args.file_path, key='df')
    if hasattr(args, 'pSTAT'):
        df = df.filter(regex='^((?!pSTAT).)*$')
    if hasattr(args, 'filter') and args.filter != None:
        for x in args.filter:        
            assert len(x) % 2 == 0, TypeError('filter should be defined in list (Name, Value) format')
            for ind, val in enumerate(x):
                if ind % 2 == 0:
                    print("Filter data with {} value...".format(val))
                    df = df.groupby(level=val)
                else:
                    df = df.get_group(val)
    if hasattr(args, 'filterOut') and args.filterOut != None:
        for x in args.filterOut:        
            assert len(x) % 2 == 0, TypeError('filter should be defined in list (Name, Value) format')
            level, val = x[0], x[1]
            print("Filter out data with {} value...".format(val))
            df = df.query('{} != @val'.format(level))

    # if hasattr(args, 'add') or hasattr(args, 'drop'):
    #     df = add_drop(df, add_val=args.add, drop_val=args.drop, output=args.output_class)

    if hasattr(args, 'mixtures') and args.mixtures != None:
        levels = list(df.index.names)
        categories = [args.mixtures] + list(df.index.unique(level=args.output_class))

        data1 = df.query('Ratio == "0:1"')
        data2 = df.query('Ratio == "1:0"')
        data2 = data2.reset_index(level=args.output_class)
        data2.loc[:,args.output_class] = data2.index.get_level_values(args.mixtures)
        data2.set_index(args.output_class, append=True, inplace=True)
        data2 = data2.reorder_levels(levels)
        df = pd.concat([data1, data2], axis=0)

    if hasattr(args, 'output_class'):
        cat_type = CategoricalDtype(categories=df.index.unique(level=args.output_class), ordered=True)
        df.reset_index(level=args.output_class, inplace=True)
        df[args.output_class] = df[args.output_class].astype(cat_type)
        df.set_index(args.output_class, append=True, inplace=True)
        y = list(df.index.get_level_values(level=args.output_class))
        if hasattr(args, 'regression'):
            y = pd.Series(data=y, index=df.index, name='True Values').map(args.regression)
            le = None
        else:
            labels = list(set(df.index.get_level_values(level=args.output_class).categories))
            le = LabelEncoder().fit(labels)
            if hasattr(args, 'save_output'):
                print("Writing labelEncoder data in path {} ...".format(args.results_path))
                os.makedirs(args.results_path, exist_ok=True)
                pickle.dump(le, open(os.path.join(args.results_path, args.experiment + '_labelEncoder.pkl'), 'wb'))
            y = le.transform(y)
            y = pd.Series(data=y, index=df.index, name='True Values')
        return df, y, le
    else:
        return df


def make_results(true_val, predict_val, le, output_class, **kw):
    if 'save_path' in kw:
        pickle.dump(predict_val, open(kw['save_path']+'Probabilities.pkl', 'wb'))
    cat_type = CategoricalDtype(categories=true_val.index.get_level_values(level=output_class).categories, ordered=True)
    predict_val = np.argmax(predict_val, axis=1)
    # le = pickle.load(open(dir_path + experiment + '_labelEncoder.pkl', 'rb'))
    predict_val = le.inverse_transform(predict_val)
    predict_val = pd.Series(data=predict_val, index=true_val.index, name='Predicted Values', dtype=cat_type)
    true_val = pd.Series(data=le.inverse_transform(true_val), index=true_val.index, name='True Values', dtype=cat_type)
    results = pd.concat([true_val, predict_val], axis=1)
    if 'save_path' in kw:
        pickle.dump(results, open(kw['save_path']+'.pkl', 'wb'))

    return results
